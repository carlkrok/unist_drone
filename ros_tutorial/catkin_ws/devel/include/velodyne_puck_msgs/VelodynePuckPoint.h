// Generated by gencpp from file velodyne_puck_msgs/VelodynePuckPoint.msg
// DO NOT EDIT!


#ifndef VELODYNE_PUCK_MSGS_MESSAGE_VELODYNEPUCKPOINT_H
#define VELODYNE_PUCK_MSGS_MESSAGE_VELODYNEPUCKPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace velodyne_puck_msgs
{
template <class ContainerAllocator>
struct VelodynePuckPoint_
{
  typedef VelodynePuckPoint_<ContainerAllocator> Type;

  VelodynePuckPoint_()
    : time(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , azimuth(0.0)
    , distance(0.0)
    , intensity(0.0)  {
    }
  VelodynePuckPoint_(const ContainerAllocator& _alloc)
    : time(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , azimuth(0.0)
    , distance(0.0)
    , intensity(0.0)  {
  (void)_alloc;
    }



   typedef float _time_type;
  _time_type time;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _intensity_type;
  _intensity_type intensity;





  typedef boost::shared_ptr< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> const> ConstPtr;

}; // struct VelodynePuckPoint_

typedef ::velodyne_puck_msgs::VelodynePuckPoint_<std::allocator<void> > VelodynePuckPoint;

typedef boost::shared_ptr< ::velodyne_puck_msgs::VelodynePuckPoint > VelodynePuckPointPtr;
typedef boost::shared_ptr< ::velodyne_puck_msgs::VelodynePuckPoint const> VelodynePuckPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace velodyne_puck_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'velodyne_puck_msgs': ['/home/ubuntu/Desktop/unist_drone/ros_tutorial/catkin_ws/src/velodyne_puck/velodyne_puck_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f9dbdcdc2cb5386e16b2ab1f416979d";
  }

  static const char* value(const ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f9dbdcdc2cb5386ULL;
  static const uint64_t static_value2 = 0xe16b2ab1f416979dULL;
};

template<class ContainerAllocator>
struct DataType< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "velodyne_puck_msgs/VelodynePuckPoint";
  }

  static const char* value(const ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Time when the point is captured\n\
float32 time\n\
\n\
# Converted distance in the sensor frame\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
# Raw measurement from velodyne puck\n\
float64 azimuth\n\
float64 distance\n\
float64 intensity\n\
";
  }

  static const char* value(const ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.azimuth);
      stream.next(m.distance);
      stream.next(m.intensity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelodynePuckPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::velodyne_puck_msgs::VelodynePuckPoint_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "intensity: ";
    Printer<double>::stream(s, indent + "  ", v.intensity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VELODYNE_PUCK_MSGS_MESSAGE_VELODYNEPUCKPOINT_H
